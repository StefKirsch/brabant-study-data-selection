[{"name":"app.R","content":"library(shiny)\r\nlibrary(readxl)\r\nlibrary(dplyr)\r\nlibrary(purrr)\r\nlibrary(tidyr)\r\nlibrary(stringr)\r\nlibrary(forcats)\r\nlibrary(clipr)\r\n#library(shinyjs)\r\nlibrary(shinyalert)\r\n\r\n# Function to read and process a single sheet\r\nprocess_sheet <- function(sheet_name, file_path) {\r\n  # Read the first two rows to determine the column names\r\n  header_df <- read_excel(\r\n    file_path, \r\n    sheet = sheet_name, \r\n    n_max = 2,\r\n    col_names = FALSE,\r\n    .name_repair = \"unique_quiet\"\r\n  )\r\n  \r\n  # Read the data. We do this now, because we need the dummy column names\r\n  df <- file_path |>\r\n    read_excel(\r\n      sheet = sheet_name,\r\n      skip = 0, \r\n      col_names = FALSE,\r\n      .name_repair = \"unique_quiet\"\r\n    ) |> \r\n    slice(-1:-2)\r\n  \r\n  auto_names <- colnames(df)\r\n  \r\n  col_names <- ifelse(\r\n    is.na(header_df[2, ]),\r\n    header_df[1, ],\r\n    header_df[2, ]\r\n  ) |> \r\n    unlist()\r\n  \r\n  col_names <- str_remove(col_names, \":\")\r\n  auto_names <- set_names(auto_names, col_names)\r\n  auto_names <- auto_names[1:detect_index(col_names, is.na) - 1]\r\n  \r\n  df <- df |>\r\n    rename(\r\n      any_of(auto_names)\r\n    ) |> \r\n    select(names(auto_names)) |> \r\n    mutate(\r\n      Category = sheet_name,\r\n      .before = Subscale\r\n    ) |> \r\n    mutate(across(\r\n      matches(\"T[0-9]\"),\r\n      as.logical\r\n    )) |> \r\n    fill(Subscale, .direction = \"down\")\r\n  \r\n  return(df)\r\n}\r\n\r\n# Function to generate dplyr code\r\ngenerate_dplyr_code <- function(tibble) {\r\n  code <- \"select(\\n\"\r\n  current_category <- \"\"\r\n  \r\n  tibble_grouped <- tibble |>\r\n    mutate(\r\n      Category = as_factor(Category),\r\n      Subscale = as_factor(Subscale)\r\n    ) |> \r\n    group_by(Category, Subscale) |>\r\n    group_split()\r\n  \r\n  for (group in tibble_grouped) {\r\n    category <- unique(group$Category)\r\n    subscale <- unique(group$Subscale)\r\n    time_points <- c()\r\n    \r\n    for (row in seq_len(nrow(group))) {\r\n      variable <- paste0(\"starts_with(\\\"\", group$Variable[row], \"_\\\")\")\r\n      \r\n      for (time_point in c(\"T1\", \"T2\", \"T3\")) {\r\n        if (group[[row, time_point]]) {\r\n          time_points <- c(\r\n            time_points, \r\n            paste0(\"    \", variable, \" & contains(\\\"_\", time_point, \"\\\")\")\r\n          )\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (length(time_points) > 0) {\r\n      if (category != current_category) {\r\n        code <- paste0(code, \"    # \", \"Category: \", category, \"\\n\")\r\n        current_category <- category\r\n      }\r\n      code <- paste0(code, \"      # \", \"Subscale: \", subscale, \"\\n\")\r\n      columns <- paste(time_points, collapse = \",\\n    \")\r\n      code <- paste0(code, \"    \", columns, \",\\n\")\r\n    }\r\n  }\r\n  \r\n  code <- paste0(substr(code, 1, nchar(code) - 2), \"\\n  )\")\r\n  \r\n  return(code)\r\n}\r\n\r\n# Define the UI\r\nui <- fluidPage(\r\n  #useShinyjs(),\r\n  titlePanel(\"Excel Data to dplyr Code Converter\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      p(\"Upload an Excel file to generate the dplyr select code. Click 'Convert to Code' to see the generated code and 'Copy Code to Clipboard' to copy the code.\"),\r\n      fileInput(\"file\", \"Choose Excel File\", accept = c(\".xlsx\")),\r\n      actionButton(\"convert\", \"Convert to Code\"),\r\n      actionButton(\"clear\", \"Clear\"),\r\n      hr(),\r\n      actionButton(\"copyCode\", \"Copy Code to Clipboard\")\r\n    ),\r\n    mainPanel(\r\n      tabsetPanel(\r\n        id = \"mainTabs\",\r\n        tabPanel(\"Data Preview\", tableOutput(\"dataPreview\")),\r\n        tabPanel(\"Code Preview\", verbatimTextOutput(\"codePreview\"))\r\n      )\r\n    )\r\n  )\r\n)\r\n\r\n# Define the server\r\nserver <- function(input, output, session) {\r\n  codeText <- reactiveVal(\"\")\r\n  selectionData <- reactiveVal(NULL)\r\n  \r\n  # Input file file picker\r\n  observeEvent(input$file, {\r\n    updateTabsetPanel(session, \"mainTabs\", selected = \"Data Preview\")\r\n  })\r\n  \r\n  # Convert to Code button\r\n  observeEvent(input$convert, {\r\n    req(input$file)\r\n    \r\n    file_path <- input$file$datapath\r\n    sheet_names <- excel_sheets(file_path)\r\n    sheet_names <- sheet_names[!startsWith(sheet_names, \"_\")]\r\n    \r\n    selection_data <- map_df(\r\n      sheet_names, \r\n      process_sheet, \r\n      file_path = file_path\r\n    ) |> \r\n      mutate(across(\r\n        everything(),\r\n        ~ replace_na(.x, FALSE)\r\n      ))\r\n    \r\n    selectionData(selection_data)\r\n    \r\n    select_code <- generate_dplyr_code(selection_data)\r\n    full_code <- paste0(\"data_brabant |>\\n\", select_code)\r\n    codeText(full_code)\r\n    \r\n    output$codePreview <- renderText({\r\n      full_code\r\n    })\r\n    \r\n    output$dataPreview <- renderTable({\r\n      selection_data\r\n    })\r\n    \r\n    updateTabsetPanel(session, \"mainTabs\", selected = \"Data Preview\")\r\n  })\r\n  \r\n  # clear button\r\n  observeEvent(input$clear, {\r\n    updateTabsetPanel(session, \"mainTabs\", selected = \"Data Preview\")\r\n    output$dataPreview <- renderTable(NULL)\r\n    output$codePreview <- renderText(NULL)\r\n    reset(\"file\")\r\n    codeText(\"\")\r\n    selectionData(NULL)\r\n  })\r\n  \r\n  # Copy Code to Clipboard Button\r\n  observeEvent(input$copyCode, {\r\n    #req(codeText())\r\n    if (isTruthy(codeText())) {\r\n      write_clip(codeText(), allow_non_interactive = TRUE)\r\n    } else {\r\n      shinyalert(\r\n        title = \"Warning\",\r\n        text = \"Please select a file first and click on \\\"Convert to Code\\\"\",\r\n        type = \"warning\"\r\n      )\r\n    }\r\n      \r\n    \r\n    updateTabsetPanel(session, \"mainTabs\", selected = \"Code Preview\")\r\n  })\r\n}\r\n\r\n# Helper function to reset file input\r\nreset <- function(id) {\r\n  #shinyjs::reset(id)\r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
